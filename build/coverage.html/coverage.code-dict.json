{"/home/travis/build/npmtest/node-npmtest-jsonr/test.js":"/* istanbul instrument in package npmtest_jsonr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonr/lib.npmtest_jsonr.js":"/* istanbul instrument in package npmtest_jsonr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsonr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsonr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsonr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsonr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsonr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsonr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsonr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsonr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsonr.__dirname + '/lib.npmtest_jsonr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonr/node_modules/jsonr/jsonr-module.js":"/*\n    jsonr-module.js\n    2013-07-23\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    \n    Author: Franck WOLFF (http://www.graniteds.org)\n\n    Based on the work of Douglas Crockford\n    See http://www.JSON.org/js.html\n\n    This file define a Node.js module exporting four methods: stringify,\n    isReference, revealReferences and parse:\n\n\n      - stringify(value, replacer, space)\n\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value. If it encounters\n            multiple references to the same object instance (even circular references),\n            it only encodes the first occurrence and put a reference for all others in\n            the form of: \"\\uXXXX\" (with XXXX = (index of instance + 0xE000)).\n            \n            See implementation for detail.\n\n\n      - isReference(value)\n\n              value        any JavaScript value.\n              \n              This method returns true if the value is a String of length 1 with a\n              unicode character in the range \\uE000 - \\uF8FF (ie. UTF8 private usage area).\n\n\n      - revealReferences(text)\n\n            text        a JSON text encoded by the JSONR.stringify method.\n            \n            This method returns its parameter with all references replaced by human\n            readable text (eg. \"\\uE000\" -> \"^0\", \"\\uE001\" -> \"^1\", ...,\n            \"\\uE00A\" -> \"^10\", etc.)\n\n\n      - parse(text, reviver)\n        \n            text        a JSON encoded text, such as those returned by\n                        stringify.\n            \n            reviver        an optional parameter that can filter and\n                        transform the results. It receives each of the keys and values,\n                        and its return value is used instead of the original value.\n                        If it returns what it received, then the structure is not\n                        modified. If it returns undefined then the member is deleted.\n\n            \n            This method parses a JSON text to produce a JavaScript object. If the text\n            parameter was obtained through a JSONR stringify method (or compatible),\n            this method also resolve all references (see above).\n\n\n    This is a reference implementation. You are free to copy, modify, or redistribute.\n\n*/\n\n/*jslint node:true*/\n\n'use strict';\n\nvar escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep,\n    dy,\n    maxi = 0xF8FF - 0xE000;\n\nfunction esc(a) {\n    var c = meta[a];\n    return typeof c === 'string'\n        ? c\n        : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n}\n\nfunction quote(string) {\n    var c;\n\n    escapable.lastIndex = 0;\n    if (escapable.test(string)) {\n        string = string.replace(escapable, esc);\n    }\n\n    if (string.length > 0) {\n        c = string.charCodeAt(0);\n        if (c >= 0xE000 && c <= 0xF8FF) {\n            string = '\\uE000' + string;\n        }\n    }\n\n    return '\"' + string + '\"';\n}\n\n\nfunction str(key, holder) {\n\n    var i,\n        k,\n        ks,\n        v,\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n\n    if (value !== null && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n\n    switch (typeof value) {\n    case 'string':\n        return quote(value);\n\n    case 'number':\n        return isFinite(value) ? String(value) : 'null';\n\n    case 'boolean':\n    case 'null':\n        return String(value);\n\n    case 'object':\n\n        if (!value) {\n            return 'null';\n        }\n\n        i = dy.indexOf(value);\n        if (i !== -1) {\n            return '\"' + String.fromCharCode(0xE000 + i) + '\"';\n        }\n\n        if (dy.length > maxi) {\n            throw new Error('JSONR.stringify: too many references');\n        }\n\n        dy.push(value);\n\n        gap += indent;\n        partial = [];\n\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n            length = value.length;\n            for (i = 0; i < length; i += 1) {\n                partial[i] = str(i, value) || 'null';\n            }\n\n            v = partial.length === 0\n                ? '[]'\n                : gap\n                ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n                : '[' + partial.join(',') + ']';\n            gap = mind;\n            return v;\n        }\n\n        if (rep && typeof rep === 'object') {\n\n            length = rep.length;\n            for (i = 0; i < length; i += 1) {\n                k = rep[i];\n                v = str(k, value);\n                if (v) {\n                    partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                }\n            }\n        } else {\n\n            ks = Object.keys(value);\n            length = ks.length;\n            for (i = 0; i < length; i += 1) {\n                k = ks[i];\n                v = str(k, value);\n                if (v) {\n                    partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                }\n            }\n        }\n\n        v = partial.length === 0\n            ? '{}'\n            : gap\n            ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n            : '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nexports.stringify = function (value, replacer, space) {\n    var i, s;\n\n    indent = '';\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    } else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    rep = null;\n    if (replacer) {\n        if (typeof replacer === 'function') {\n            rep = replacer;\n        } else if (Object.prototype.toString.apply(replacer) === '[object Array]') {\n            for (i = 0; i < replacer.length; i += 1) {\n                if (typeof replacer[i] !== 'string') {\n                    throw new Error('JSONR.stringify: illegal replacer');\n                }\n            }\n            rep = replacer.concat();\n        } else {\n            throw new Error('JSONR.stringify: illegal replacer');\n        }\n    }\n\n    gap = '';\n    dy = [];\n\n    try {\n        s = str('', {'': value});\n    } finally {\n        gap = null;\n        indent = null;\n        rep = null;\n        dy = null;\n    }\n\n    return s;\n};\n\nexports.isReference = function (value) {\n    var c;\n    if (typeof value === 'string' && value.length === 1) {\n        c = value.charCodeAt(0);\n        return c >= 0xE000 && c <= 0xF8FF;\n    }\n    return false;\n};\n\nexports.revealReferences = function (text) {\n    var begins = /\"(?:[^\"\\\\]|\\\\.)*\"|[\\[\\{]/g,\n        indexes = /\\\"[\\uE000-\\uF8FF]\\\"/g,\n        index = 0;\n\n    text = begins.test(text) ? text.replace(begins, function (s) {\n        if (s.charAt(0) !== '\"') {\n            s = '@' + index + s;\n            index += 1;\n        }\n        return s;\n    }) : text;\n\n    return indexes.test(text) ? text.replace(indexes, function (i) {\n        return '\"@' + (i.charCodeAt(1) - 0xE000) + '\"';\n    }) : text;\n};\n\nfunction unref(value) {\n    var c, i, k, ks, length;\n\n    switch (typeof value) {\n    case 'string':\n        if (value.length > 0) {\n            c = value.charCodeAt(0);\n            if (c >= 0xE000 && c <= 0xF8FF) {\n                if (value.length === 1) {\n                    value = dy[c - 0xE000];\n                } else if (c === 0xE000) {\n                    value = value.substr(1);\n                }\n            }\n        }\n        break;\n\n    case 'object':\n        if (value !== null) {\n            i = dy.indexOf(value);\n            if (i === -1) {\n                dy.push(value);\n            }\n\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    value[i] = unref(value[i]);\n                }\n            } else {\n                ks = Object.keys(value);\n                length = ks.length;\n                for (i = 0; i < length; i += 1) {\n                    k = ks[i];\n                    value[k] = unref(value[k]);\n                }\n            }\n        }\n        break;\n    }\n\n    return value;\n}\n\nexports.parse = function (text, reviver) {\n    var value = JSON.parse(text, reviver);\n    dy = [];\n    try {\n        value = unref(value);\n    } finally {\n        dy = null;\n    }\n    return value;\n};\n","/home/travis/build/npmtest/node-npmtest-jsonr/node_modules/jsonr/jsonr.js":"/*\n    jsonr.js\n    2013-07-23\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    \n    Author: Franck WOLFF (http://www.graniteds.org)\n\n    Based on the work of Douglas Crockford\n    See http://www.JSON.org/js.html\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n    This file creates a global JSONR object containing four methods: stringify,\n    isReference, revealReferences and parse:\n\n\n      - JSONR.stringify(value, replacer, space)\n\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value. If it encounters\n            multiple references to the same object instance (even circular references),\n            it only encodes the first occurrence and put a reference for all others in\n            the form of: \"\\uXXXX\" (with XXXX = (index of instance + 0xE000)).\n            \n            See implementation for detail.\n\n\n      - JSONR.isReference(value)\n\n              value        any JavaScript value.\n              \n              This method returns true if the value is a String of length 1 with a\n              unicode character in the range \\uE000 - \\uF8FF (ie. UTF8 private usage area).\n\n\n      - JSONR.revealReferences(text)\n\n            text        a JSON text encoded by the JSONR.stringify method.\n            \n            This method returns its parameter with all references replaced by human\n            readable text (eg. \"\\uE000\" -> \"^0\", \"\\uE001\" -> \"^1\", ...,\n            \"\\uE00A\" -> \"^10\", etc.)\n\n\n      - JSONR.parse(text, reviver)\n        \n            text        a JSON encoded text, such as those returned by\n                        stringify.\n            \n            reviver        an optional parameter that can filter and\n                        transform the results. It receives each of the keys and values,\n                        and its return value is used instead of the original value.\n                        If it returns what it received, then the structure is not\n                        modified. If it returns undefined then the member is deleted.\n\n            \n            This method parses a JSON text to produce a JavaScript object. If the text\n            parameter was obtained through a JSONR stringify method (or compatible),\n            this method also resolve all references (see above).\n\n\n    This is a reference implementation. You are free to copy, modify, or redistribute.\n\n*/\n\n/*jslint regexp: true*/\n/*global JSONR:true*/\n\nif (typeof JSONR !== 'object') {\n\n    JSONR = {};\n\n    (function () {\n        'use strict';\n\n        var escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n            gap,\n            indent,\n            meta = {\n                '\\b': '\\\\b',\n                '\\t': '\\\\t',\n                '\\n': '\\\\n',\n                '\\f': '\\\\f',\n                '\\r': '\\\\r',\n                '\"' : '\\\\\"',\n                '\\\\': '\\\\\\\\'\n            },\n            rep,\n            dy,\n            maxi = 0xF8FF - 0xE000;\n\n\n        // JSONR.stringify\n\n        function esc(a) {\n            var c = meta[a];\n            return typeof c === 'string'\n                ? c\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }\n\n        function quote(string) {\n            var c;\n\n            escapable.lastIndex = 0;\n            if (escapable.test(string)) {\n                string = string.replace(escapable, esc);\n            }\n\n            if (string.length > 0) {\n                c = string.charCodeAt(0);\n                if (c >= 0xE000 && c <= 0xF8FF) {\n                    string = '\\uE000' + string;\n                }\n            }\n\n            return '\"' + string + '\"';\n        }\n\n\n        function str(key, holder) {\n\n            var i,\n                k,\n                ks,\n                v,\n                length,\n                mind = gap,\n                partial,\n                value = holder[key];\n\n            if (value !== null && typeof value === 'object' &&\n                    typeof value.toJSON === 'function') {\n                value = value.toJSON(key);\n            }\n\n            if (typeof rep === 'function') {\n                value = rep.call(holder, key, value);\n            }\n\n            switch (typeof value) {\n            case 'string':\n                return quote(value);\n\n            case 'number':\n                return isFinite(value) ? String(value) : 'null';\n\n            case 'boolean':\n            case 'null':\n                return String(value);\n\n            case 'object':\n\n                if (!value) {\n                    return 'null';\n                }\n\n                i = dy.indexOf(value);\n                if (i !== -1) {\n                    return '\"' + String.fromCharCode(0xE000 + i) + '\"';\n                }\n\n                if (dy.length > maxi) {\n                    throw new Error('JSONR.stringify: too many references');\n                }\n\n                dy.push(value);\n\n                gap += indent;\n                partial = [];\n\n                if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n                    length = value.length;\n                    for (i = 0; i < length; i += 1) {\n                        partial[i] = str(i, value) || 'null';\n                    }\n\n                    v = partial.length === 0\n                        ? '[]'\n                        : gap\n                        ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n                        : '[' + partial.join(',') + ']';\n                    gap = mind;\n                    return v;\n                }\n\n                if (rep && typeof rep === 'object') {\n\n                    length = rep.length;\n                    for (i = 0; i < length; i += 1) {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                } else {\n\n                    ks = Object.keys(value);\n                    length = ks.length;\n                    for (i = 0; i < length; i += 1) {\n                        k = ks[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n\n                v = partial.length === 0\n                    ? '{}'\n                    : gap\n                    ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n                    : '{' + partial.join(',') + '}';\n                gap = mind;\n                return v;\n            }\n        }\n\n        JSONR.stringify = function (value, replacer, space) {\n            var i, s;\n\n            indent = '';\n            if (typeof space === 'number') {\n                for (i = 0; i < space; i += 1) {\n                    indent += ' ';\n                }\n            } else if (typeof space === 'string') {\n                indent = space;\n            }\n\n            rep = null;\n            if (replacer) {\n                if (typeof replacer === 'function') {\n                    rep = replacer;\n                } else if (Object.prototype.toString.apply(replacer) === '[object Array]') {\n                    for (i = 0; i < replacer.length; i += 1) {\n                        if (typeof replacer[i] !== 'string') {\n                            throw new Error('JSONR.stringify: illegal replacer');\n                        }\n                    }\n                    rep = replacer.concat().sort();\n                } else {\n                    throw new Error('JSONR.stringify: illegal replacer');\n                }\n            }\n\n            gap = '';\n            dy = [];\n\n            try {\n                s = str('', {'': value});\n            } finally {\n                gap = null;\n                indent = null;\n                rep = null;\n                dy = null;\n            }\n\n            return s;\n        };\n\n        // JSONR.isReference\n\n        JSONR.isReference = function (value) {\n            var c;\n            if (typeof value === 'string' && value.length === 1) {\n                c = value.charCodeAt(0);\n                return c >= 0xE000 && c <= 0xF8FF;\n            }\n            return false;\n        };\n\n        // JSONR.revealReferences\n\n        JSONR.revealReferences = function (text) {\n            var begins = /\"(?:[^\"\\\\]|\\\\.)*\"|[\\[\\{]/g,\n                indexes = /\\\"[\\uE000-\\uF8FF]\\\"/g,\n                index = 0;\n\n            text = begins.test(text) ? text.replace(begins, function (s) {\n                if (s.charAt(0) !== '\"') {\n                    s = '@' + index + s;\n                    index += 1;\n                }\n                return s;\n            }) : text;\n\n            return indexes.test(text) ? text.replace(indexes, function (i) {\n                return '\"@' + (i.charCodeAt(1) - 0xE000) + '\"';\n            }) : text;\n        };\n\n        // JSONR.parse\n\n        function unref(value) {\n            var c, i, k, ks, length;\n\n            switch (typeof value) {\n            case 'string':\n                if (value.length > 0) {\n                    c = value.charCodeAt(0);\n                    if (c >= 0xE000 && c <= 0xF8FF) {\n                        if (value.length === 1) {\n                            value = dy[c - 0xE000];\n                        } else if (c === 0xE000) {\n                            value = value.substr(1);\n                        }\n                    }\n                }\n                break;\n\n            case 'object':\n                if (value !== null) {\n                    i = dy.indexOf(value);\n                    if (i === -1) {\n                        dy.push(value);\n                    }\n\n                    if (Object.prototype.toString.apply(value) === '[object Array]') {\n                        length = value.length;\n                        for (i = 0; i < length; i += 1) {\n                            value[i] = unref(value[i]);\n                        }\n                    } else {\n                        ks = Object.keys(value).sort();\n                        length = ks.length;\n                        for (i = 0; i < length; i += 1) {\n                            k = ks[i];\n                            value[k] = unref(value[k]);\n                        }\n                    }\n                }\n                break;\n            }\n\n            return value;\n        }\n\n        JSONR.parse = function (text, reviver) {\n            var value = JSON.parse(text, reviver);\n            dy = [];\n            try {\n                value = unref(value);\n            } finally {\n                dy = null;\n            }\n            return value;\n        };\n    }());\n}\n","/home/travis/build/npmtest/node-npmtest-jsonr/node_modules/jsonr/jsonr-server.js":"/*\n    jsonr-server.js\n    2013-07-23\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    \n    Author: Franck WOLFF (http://www.graniteds.org)\n    \n    A sample Node.js server using jsonr.\n*/\n\n/*jslint node:true*/\n\n'use strict';\n\nvar http = require('http'),\n    fs = require('fs'),\n    jsonr = require('./jsonr-module'),\n\n// Creates the data model: cities have references to countries and each country has a\n// reference to a capital. This brings both multiple references to the same object (eg.\n// Washington DC and New York point to the same country instance: USA) and circular\n// references (eg. Washington DC points to USA which have a reference to Washington DC\n// as its capital).\n\n    countries = [\n        { name: 'USA', language: 'English' },\n        { name: 'France', language: 'French' },\n        { name: 'India', language: 'Hindi' }\n    ],\n    cities = [\n        { name: 'Washington DC', country: countries[0] },\n        { name: 'New York', country: countries[0] },\n        { name: 'San Francisco', country: countries[0] },\n\n        { name: 'Paris', country: countries[1] },\n        { name: 'Lyon', country: countries[1] },\n\n        { name: 'New Delhi', country: countries[2] },\n        { name: 'Bangalore', country: countries[2] }\n    ];\n\n// Circular references:\n\ncountries[0].capital = cities[0];\ncountries[1].capital = cities[3];\ncountries[2].capital = cities[5];\n\nhttp.createServer(function (req, res) {\n\n    var data;\n\n    console.log('Serving ' + req.url);\n\n// Stringifies all cities with jsonr, logs jsonr data (with human readable references)\n// and returns the data.\n\n    if (req.url === '/cities') {\n        data = jsonr.stringify(cities, null, '\\t');\n        console.log(jsonr.revealReferences(data));\n\n        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});\n        res.write(data);\n        res.end();\n\n// Logs posted jsonr data (with human readable references), parses them and returns\n// an empty response.\n\n    } else if (req.url === '/new-cities') {\n        data = '';\n        req.on('data', function (chunk) { data += chunk.toString(); });\n        req.on('end', function () {\n            console.log(jsonr.revealReferences(data));\n            cities = cities.concat(jsonr.parse(data));\n\n            res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});\n            res.end();\n        });\n\n// Serves html / js files.\n\n    } else {\n        fs.readFile('.' + req.url, function (err, content) {\n            if (err) {\n                console.log('  Not Found ' + req.url);\n                res.writeHead(404);\n                res.end();\n            } else {\n                if (req.url.indexOf('.html') !== -1) {\n                    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});\n                } else {\n                    res.writeHead(200, {'Content-Type': 'text/javascript; charset=utf-8'});\n                }\n                res.write(content);\n                res.end();\n            }\n        });\n    }\n}).listen(8080, 'localhost');\n\nconsole.log('Server running at http://localhost:8080/');\n"}